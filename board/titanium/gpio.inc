/* -*- mode:c -*-
 *
 * Copyright 2019 The Chromium OS Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

GPIO_INT(POWER_BUTTON_L,   PIN(D, 10), GPIO_INT_BOTH, power_button_interrupt)

GPIO_INT(MASTER_PG_MCU,    PIN(B, 5),  GPIO_INT_FALLING, power_signal_interrupt)
GPIO_INT(PS_DONE,          PIN(C, 13), GPIO_INT_BOTH, power_signal_interrupt)
GPIO_INT(PS_INIT_L,        PIN(D, 4),  GPIO_INT_BOTH, power_signal_interrupt)
GPIO_INT(PS_ERR_OUT,       PIN(D, 6),  GPIO_INT_BOTH, power_signal_interrupt)
GPIO_INT(PS_ERR_STAT,      PIN(D, 7),  GPIO_INT_BOTH, power_signal_interrupt)
GPIO_INT(RESET_BUTTON_L,   PIN(D, 9),  GPIO_INT_BOTH, reset_button_interrupt)
GPIO_INT(PS_SHUTDOWN_L,    PIN(E, 13), GPIO_INT_BOTH | GPIO_PULL_UP, power_signal_interrupt)
GPIO_INT(DB_PWR_INT,       PIN(C, 14), GPIO_INT_FALLING, pwrsup_interrupt)



/* Analog pins */
GPIO(0V9_VMON,             PIN(A, 0),  GPIO_ANALOG)
GPIO(CORE_VMON_0V85,       PIN(A, 1),  GPIO_ANALOG)
GPIO(0V925_DAC_AVCC_VMON,  PIN(A, 2),  GPIO_ANALOG)
GPIO(0V925_ADC_AVCC_VMON,  PIN(A, 3),  GPIO_ANALOG)
GPIO(DDRS_VMON_1V2,        PIN(A, 4),  GPIO_ANALOG)
GPIO(DDRN_VMON_1V2,        PIN(A, 5),  GPIO_ANALOG)
GPIO(1V8_ADC_AVCCAUX_VMON, PIN(A, 6),  GPIO_ANALOG)
GPIO(1V8_DAC_AVCCAUX_VMON, PIN(A, 7),  GPIO_ANALOG)
/* Make input till actually set by I2C code */
GPIO(DB_SWITCH_I2C_SCL,    PIN(A, 8),  GPIO_INPUT)
/*GPIO(UART_RX_SCU,          PIN(A, 9),  GPIO_INPUT) */
/*GPIO(UART_TX_SCU,          PIN(A, 10), GPIO_OUTPUT) */
/* TODO: CAN0/1 */
GPIO(M3_BUS_0_CAN_TX,      PIN(A, 11), GPIO_OUTPUT)
GPIO(M3_BUS_0_CAN_RX,      PIN(A, 12), GPIO_INPUT)
/* PA13, PA14, PA15 are JTAG */

GPIO(VMON_1V8,             PIN(B, 0),  GPIO_ANALOG)
GPIO(VMON_2V5,             PIN(B, 1),  GPIO_ANALOG)
GPIO(DDR4S_VDDQ_EN,        PIN(B, 2),  GPIO_OUT_LOW)
/* PB3, PB4 are JTAG */
/* TODO: This should be an IRQ */
/*GPIO(MASTER_PG_MCU,        PIN(B, 5),  GPIO_INPUT) */
GPIO(FAN0_PWM,             PIN(B, 6),  GPIO_OUTPUT)
GPIO(FAN1_PWM,             PIN(B, 7),  GPIO_OUTPUT)
/* These are called PS_STM_I2C_SCL/SCA in schematic */
GPIO(SLAVE_I2C_SCL,        PIN(B, 8),  GPIO_INPUT)
GPIO(SLAVE_I2C_SDA,        PIN(B, 9),  GPIO_INPUT)
/* These are called CORE_PMB_CLK/DAT in schematic */
GPIO(CORE_PMB_CLK,         PIN(B, 10), GPIO_INPUT)
GPIO(CORE_PMB_DAT,         PIN(B, 11), GPIO_INPUT)
/* TODO: This should be an IRQ? */
GPIO(CORE_PMB_ALERT,       PIN(B, 12), GPIO_INPUT)
GPIO(3V3_EN,               PIN(B, 13), GPIO_OUT_LOW)
GPIO(2V5_EN,               PIN(B, 14), GPIO_OUT_LOW)
GPIO(3V6_EN,               PIN(B, 15), GPIO_OUT_LOW)

GPIO(3V0_DAC_VTT_VMON_s,   PIN(C, 0),  GPIO_ANALOG)
GPIO(VIN_IMON_s,           PIN(C, 1),  GPIO_ANALOG)
GPIO(1V8_CLK_VMON_DIV2,    PIN(C, 2),  GPIO_ANALOG)
GPIO(3V3_VMON_DIV2,        PIN(C, 3),  GPIO_ANALOG)
GPIO(3V3_CLK_VMON_DIV2,    PIN(C, 4),  GPIO_ANALOG)
GPIO(3V6_VMON_DIV2,        PIN(C, 5),  GPIO_ANALOG)
GPIO(FAN_0_EN,             PIN(C, 6),  GPIO_OUT_LOW)
GPIO(FAN_1_EN,             PIN(C, 7),  GPIO_OUT_LOW)
GPIO(DACVCC_EN,            PIN(C, 8),  GPIO_OUT_LOW)
/* Make input till actually set by I2C code */
GPIO(DB_SWITCH_I2C_SDA,    PIN(C, 9),  GPIO_INPUT)
GPIO(DDR4N_VTT_EN,         PIN(C, 10), GPIO_OUT_LOW)
GPIO(ADC_VCCAUX_EN,        PIN(C, 11), GPIO_OUT_LOW)
GPIO(3V3_CLK_EN,           PIN(C, 12), GPIO_OUT_LOW)
/* This should be an IRQ? */
//GPIO(PS_DONE,              PIN(C, 13), GPIO_INPUT)//
GPIO(JTAG_EN_L,            PIN(C, 15), GPIO_OUT_HIGH)

GPIO(PS_MODE_3,            PIN(D, 0),  GPIO_OUTPUT)
GPIO(PS_MODE_1,            PIN(D, 1),  GPIO_OUTPUT)
GPIO(PS_MODE_2,            PIN(D, 2),  GPIO_OUTPUT)
UNIMPLEMENTED(PS_MODE_0)

GPIO(MCU_LED_L,            PIN(D, 3),  GPIO_OUTPUT)
/* Should these be IRQs? */
/*GPIO(PS_INIT_L,            PIN(D, 4),  GPIO_INPUT) */
GPIO(PS_PROG_L,            PIN(D, 5),  GPIO_INPUT)
/*GPIO(PS_ERR_OUT,           PIN(D, 6),  GPIO_INPUT) */
/*GPIO(PS_ERR_STAT,          PIN(D, 7),  GPIO_INPUT) */
/* D8 is missing in our package */
/*GPIO(BUT_RESET_L,          PIN(D, 9),  GPIO_INPUT)*/
/* see above for PD10 with IRQs */
GPIO(DDR4N_VDDQ_EN,        PIN(D, 11), GPIO_OUT_LOW)
GPIO(CORE_PMB_CNTL,        PIN(D, 12), GPIO_OUT_LOW)
GPIO(0V9_EN,               PIN(D, 13), GPIO_OUT_LOW)
GPIO(1V8_EN,               PIN(D, 14), GPIO_OUT_LOW)
GPIO(ADCVCC_EN,            PIN(D, 15), GPIO_OUT_LOW)

GPIO(EC_INT_L,             PIN(E, 0),  GPIO_OUT_HIGH)
GPIO(RTC_CHARGE_L,         PIN(E, 1),  GPIO_OUT_LOW)
/* TODO: Should default to high? */
GPIO(DB_SWITCH_I2C_RST_L,  PIN(E, 2),  GPIO_OUT_HIGH)
GPIO(MGTAUX_EN,            PIN(E, 3),  GPIO_OUT_LOW)
GPIO(RF_PG_MCU,            PIN(E, 4),  GPIO_INPUT)
GPIO(DAC_VCCAUX_EN,        PIN(E, 7),  GPIO_OUT_LOW)
GPIO(DACVTT_EN,            PIN(E, 8),  GPIO_OUT_LOW)
GPIO(DDR4S_VTT_EN,         PIN(E, 9),  GPIO_OUT_LOW)
GPIO(M3_BUS_0_ALRT,        PIN(E, 10), GPIO_OUTPUT)
/* TODO: Should this be an IRQ ?*/
GPIO(STM_PG_OUT,           PIN(E, 11), GPIO_OUT_LOW)
GPIO(SCPLD_IN,             PIN(E, 12), GPIO_INPUT)
GPIO(PS_STM_MIO35,         PIN(E, 14), GPIO_INPUT)
GPIO(PS_SRST_L,            PIN(E, 15), GPIO_OUTPUT)

GPIO(PS_POR_L,             PIN(H, 0),  GPIO_ODR_LOW)
GPIO(MGTAUX_EN_MCU,        PIN(H, 1),  GPIO_OUT_LOW)

UNIMPLEMENTED(ENTERING_RW)
UNIMPLEMENTED(WP_L)

ALTERNATE(PIN_MASK(A, 0x0600), GPIO_ALT_USART,   MODULE_UART, 0)    /* USART1: PA9/PA10 */
ALTERNATE(PIN_MASK(B, 0x0c00), GPIO_ALT_I2C,     MODULE_I2C,  GPIO_OPEN_DRAIN) /* I2C2:   PB10/PB11 */
ALTERNATE(PIN_MASK(A, 0x0100), GPIO_ALT_I2C,     MODULE_I2C,  GPIO_OPEN_DRAIN) /* I2C3 PA8 */
ALTERNATE(PIN_MASK(C, 0x0200), GPIO_ALT_I2C,     MODULE_I2C,  GPIO_OPEN_DRAIN) /* I2C3 PC9 */
ALTERNATE(PIN_MASK(B, 0x0300), GPIO_ALT_I2C,     MODULE_I2C,  GPIO_OPEN_DRAIN) /* I2C1:   PB8/PB9 */
ALTERNATE(PIN_MASK(B, 0x0040), GPIO_ALT_TIM3_4,  MODULE_PWM, 0) /* FAN0_PWM,  PB6, TIM4_CH1 */
ALTERNATE(PIN_MASK(B, 0x0080), GPIO_ALT_TIM3_4,  MODULE_PWM, 0) /* FAN1_PWM,  PB7, TIM4_CH2 */
ALTERNATE(PIN_MASK(E, 0x0020), GPIO_ALT_TIM9_11, MODULE_PWM, 0) /* FAN0_TACH, PE5, TIM9_CH1 */
ALTERNATE(PIN_MASK(E, 0x0040), GPIO_ALT_TIM9_11, MODULE_PWM, 0) /* FAN1_TACH, PE6, TIM9_CH2 */


IOEX(DB0_12V_EN, EXPIN(IOEX_DB0_PWR, 0, 0), GPIO_OUT_LOW)
IOEX(DB0_12V_PG, EXPIN(IOEX_DB0_PWR, 0, 1), GPIO_INPUT)
IOEX(DB0_3V3_EN, EXPIN(IOEX_DB0_PWR, 0, 2), GPIO_OUT_LOW)
IOEX(DB0_3V3_PG, EXPIN(IOEX_DB0_PWR, 0, 3), GPIO_INPUT)
IOEX(DB0_3V7_EN, EXPIN(IOEX_DB0_PWR, 0, 4), GPIO_OUT_LOW)
IOEX(DB0_3V7_PG, EXPIN(IOEX_DB0_PWR, 0, 5), GPIO_INPUT)
IOEX(DB0_2V5_EN, EXPIN(IOEX_DB0_PWR, 0, 6), GPIO_OUT_LOW)
IOEX(DB0_2V5_PG, EXPIN(IOEX_DB0_PWR, 0, 7), GPIO_INPUT)
IOEX(DB0_1V8_EN, EXPIN(IOEX_DB0_PWR, 1, 0), GPIO_OUT_LOW)
IOEX(DB0_1V8_PG, EXPIN(IOEX_DB0_PWR, 1, 1), GPIO_INPUT)
IOEX(DB0_3V3MCU_EN, EXPIN(IOEX_DB0_PWR, 1, 2), GPIO_OUT_LOW)
IOEX(DB0_3V3MCU_PG, EXPIN(IOEX_DB0_PWR, 1, 3), GPIO_INPUT)
IOEX(DB0_SPI_OE_L, EXPIN(IOEX_DB0_PWR, 1, 4), GPIO_OUT_HIGH)
IOEX(DIO_12V_PG, EXPIN(IOEX_DB0_PWR, 1, 5), GPIO_INPUT)
IOEX(DIO_3V3_PG, EXPIN(IOEX_DB0_PWR, 1, 6), GPIO_INPUT)
IOEX(DIO_1V2_PG, EXPIN(IOEX_DB0_PWR, 1, 7), GPIO_INPUT)

IOEX(DB1_12V_EN, EXPIN(IOEX_DB1_PWR, 0, 0), GPIO_OUT_LOW)
IOEX(DB1_12V_PG, EXPIN(IOEX_DB1_PWR, 0, 1), GPIO_INPUT)
IOEX(DB1_3V3_EN, EXPIN(IOEX_DB1_PWR, 0, 2), GPIO_OUT_LOW)
IOEX(DB1_3V3_PG, EXPIN(IOEX_DB1_PWR, 0, 3), GPIO_INPUT)
IOEX(DB1_3V7_EN, EXPIN(IOEX_DB1_PWR, 0, 4), GPIO_OUT_LOW)
IOEX(DB1_3V7_PG, EXPIN(IOEX_DB1_PWR, 0, 5), GPIO_INPUT)
IOEX(DB1_2V5_EN, EXPIN(IOEX_DB1_PWR, 0, 6), GPIO_OUT_LOW)
IOEX(DB1_2V5_PG, EXPIN(IOEX_DB1_PWR, 0, 7), GPIO_INPUT)
IOEX(DB1_1V8_EN, EXPIN(IOEX_DB1_PWR, 1, 0), GPIO_OUT_LOW)
IOEX(DB1_1V8_PG, EXPIN(IOEX_DB1_PWR, 1, 1), GPIO_INPUT)
IOEX(DB1_3V3MCU_EN, EXPIN(IOEX_DB1_PWR, 1, 2), GPIO_OUT_LOW)
IOEX(DB1_3V3MCU_PG, EXPIN(IOEX_DB1_PWR, 1, 3), GPIO_INPUT)
IOEX(DB1_SPI_OE_L, EXPIN(IOEX_DB1_PWR, 1, 4), GPIO_OUT_HIGH)
IOEX(DIO_12V_EN, EXPIN(IOEX_DB1_PWR, 1, 5), GPIO_OUT_LOW)
IOEX(DIO_1V2_EN, EXPIN(IOEX_DB1_PWR, 1, 6), GPIO_OUT_LOW)
IOEX(DIO_3V3_EN, EXPIN(IOEX_DB1_PWR, 1, 7), GPIO_OUT_LOW)


IOEX(PWRDB_LED0G_L, EXPIN(IOEX_PWR_DB, 0, 0), GPIO_OUT_HIGH)
IOEX(PWRDB_LED0R_L, EXPIN(IOEX_PWR_DB, 0, 1), GPIO_OUT_HIGH)
IOEX(PWRDB_LED1G_L, EXPIN(IOEX_PWR_DB, 0, 2), GPIO_OUT_HIGH)
IOEX(PWRDB_LED1R_L, EXPIN(IOEX_PWR_DB, 0, 3), GPIO_OUT_HIGH)
IOEX(PWRDB_LED2G_L, EXPIN(IOEX_PWR_DB, 0, 4), GPIO_OUT_HIGH)
IOEX(PWRDB_LED2R_L, EXPIN(IOEX_PWR_DB, 0, 5), GPIO_OUT_HIGH)
IOEX(PWRDB_LED3G_L, EXPIN(IOEX_PWR_DB, 0, 6), GPIO_OUT_HIGH)
IOEX(PWRDB_LED3R_L, EXPIN(IOEX_PWR_DB, 0, 7), GPIO_OUT_HIGH)

IOEX(PWRDB_VIN_PG, EXPIN(IOEX_PWR_DB, 1, 0), GPIO_INPUT)
IOEX(PWRDB_PWRLEDA_L, EXPIN(IOEX_PWR_DB, 1, 1), GPIO_OUT_HIGH)
IOEX(PWRDB_ILIM1, EXPIN(IOEX_PWR_DB, 1, 2), GPIO_OUT_LOW)
IOEX(PWRDB_ILIM2, EXPIN(IOEX_PWR_DB, 1, 3), GPIO_OUT_LOW)
IOEX(PWRDB_12V_EN, EXPIN(IOEX_PWR_DB, 1, 4), GPIO_OUT_LOW)
IOEX(PWRDB_WP, EXPIN(IOEX_PWR_DB, 1, 5), GPIO_OUT_LOW)
IOEX(PWRDB_PWRLEDB_L, EXPIN(IOEX_PWR_DB, 1, 6), GPIO_OUT_HIGH)


IOEX(CLKDB_3V7_PG, EXPIN(IOEX_CLK_DB, 0, 0), GPIO_INPUT)
IOEX(CLKDB_3V3_PG, EXPIN(IOEX_CLK_DB, 0, 1), GPIO_INPUT)
IOEX(CLKDB_12V_EN, EXPIN(IOEX_CLK_DB, 0, 2), GPIO_OUT_LOW)
IOEX(CLKDB_12V_PG, EXPIN(IOEX_CLK_DB, 0, 3), GPIO_INPUT)
IOEX(CLKDB_3V7_EN, EXPIN(IOEX_CLK_DB, 0, 4), GPIO_OUT_LOW)
IOEX(CLKDB_3V3_EN, EXPIN(IOEX_CLK_DB, 0, 5), GPIO_OUT_LOW)
IOEX(CLKDB_UART_OE_L, EXPIN(IOEX_CLK_DB, 0, 6), GPIO_OUT_LOW)

#ifdef TITANIUM_ENABLE_RFCHAR_GPIO
IOEX(DB0_TRXA_CTRL, EXPIN(IOEX_RFCHAR_DB0, 0, 0), GPIO_OUT_LOW)
IOEX(DB0_TRXB_CTRL, EXPIN(IOEX_RFCHAR_DB0, 0, 1), GPIO_OUT_LOW)
IOEX(DB0_RXA_MUX_CTRL, EXPIN(IOEX_RFCHAR_DB0, 0, 2), GPIO_OUT_LOW)
IOEX(DB0_RXB_MUX_CTRL, EXPIN(IOEX_RFCHAR_DB0, 0, 3), GPIO_OUT_LOW)
IOEX(DB0_TXA_MUX_CTRL, EXPIN(IOEX_RFCHAR_DB0, 0, 4), GPIO_OUT_LOW)
IOEX(DB0_TXB_MUX_CTRL, EXPIN(IOEX_RFCHAR_DB0, 0, 5), GPIO_OUT_LOW)
IOEX(DB0_REF_CLK_SEL_USR, EXPIN(IOEX_RFCHAR_DB0, 0, 6), GPIO_OUT_LOW)
IOEX(DB0_SHORT_EN, EXPIN(IOEX_RFCHAR_DB0, 0, 7), GPIO_OUT_LOW)
IOEX(DB0_RXA2_LED, EXPIN(IOEX_RFCHAR_DB0, 1, 0), GPIO_OUT_LOW)
IOEX(DB0_RXA_LED, EXPIN(IOEX_RFCHAR_DB0, 1, 1), GPIO_OUT_LOW)
IOEX(DB0_TXA_LED, EXPIN(IOEX_RFCHAR_DB0, 1, 2), GPIO_OUT_LOW)
IOEX(DB0_RXB2_LED, EXPIN(IOEX_RFCHAR_DB0, 1, 3), GPIO_OUT_LOW)
IOEX(DB0_RXB_LED, EXPIN(IOEX_RFCHAR_DB0, 1, 4), GPIO_OUT_LOW)
IOEX(DB0_TXB_LED, EXPIN(IOEX_RFCHAR_DB0, 1, 5), GPIO_OUT_LOW)
IOEX(DB0_WP, EXPIN(IOEX_RFCHAR_DB0, 1, 6), GPIO_OUT_LOW)

IOEX(DB1_TRXA_CTRL, EXPIN(IOEX_RFCHAR_DB1, 0, 0), GPIO_OUT_LOW)
IOEX(DB1_TRXB_CTRL, EXPIN(IOEX_RFCHAR_DB1, 0, 1), GPIO_OUT_LOW)
IOEX(DB1_RXA_MUX_CTRL, EXPIN(IOEX_RFCHAR_DB1, 0, 2), GPIO_OUT_LOW)
IOEX(DB1_RXB_MUX_CTRL, EXPIN(IOEX_RFCHAR_DB1, 0, 3), GPIO_OUT_LOW)
IOEX(DB1_TXA_MUX_CTRL, EXPIN(IOEX_RFCHAR_DB1, 0, 4), GPIO_OUT_LOW)
IOEX(DB1_TXB_MUX_CTRL, EXPIN(IOEX_RFCHAR_DB1, 0, 5), GPIO_OUT_LOW)
IOEX(DB1_REF_CLK_SEL_USR, EXPIN(IOEX_RFCHAR_DB1, 0, 6), GPIO_OUT_LOW)
IOEX(DB1_SHORT_EN, EXPIN(IOEX_RFCHAR_DB1, 0, 7), GPIO_OUT_LOW)
IOEX(DB1_RXA2_LED, EXPIN(IOEX_RFCHAR_DB1, 1, 0), GPIO_OUT_LOW)
IOEX(DB1_RXA_LED, EXPIN(IOEX_RFCHAR_DB1, 1, 1), GPIO_OUT_LOW)
IOEX(DB1_TXA_LED, EXPIN(IOEX_RFCHAR_DB1, 1, 2), GPIO_OUT_LOW)
IOEX(DB1_RXB2_LED, EXPIN(IOEX_RFCHAR_DB1, 1, 3), GPIO_OUT_LOW)
IOEX(DB1_RXB_LED, EXPIN(IOEX_RFCHAR_DB1, 1, 4), GPIO_OUT_LOW)
IOEX(DB1_TXB_LED, EXPIN(IOEX_RFCHAR_DB1, 1, 5), GPIO_OUT_LOW)
IOEX(DB1_WP, EXPIN(IOEX_RFCHAR_DB1, 1, 6), GPIO_OUT_LOW)
#endif
